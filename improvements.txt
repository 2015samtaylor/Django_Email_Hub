# Now customize the dropdowns. 

#Implement the front end to import a customer base from a csv. 
# Use the contacts from the csv as the main argument in the email send

#Have a button on the main page to be able to import a file. 
#current url for this is import-file/
#the view is EmailCreateView.as_view()
#Goes to Google Storage for the day. 

#When I upload a csv, .ipynb etc any type of file via EmailCreateView it uploads to the general bucket for 2024. 
#I need this more organized. Customize this by user upload. 



#All args are currently geared up for a certain csv. 
#Make the args dynamic based on uploaded csv. 
#Display file upload on the main page



If the file uploaded is not a csv it will be parsed properly. Need some logic for that. 
Resize the displayed file, start altering args for email send logic. 
Put bar in that monitors the send. 

send_emails_view retrieves the most recent session configuration of email_config

if request.method == 'POST':

    for key, value in EmailConfigForm.excluded_fields.items():
        email_config[key] = value

    # Call the blast function from email_send_main.py, df can be configured to be passed in dynamically with the adlibs
    #currently reads df from views file being a global variable
    blast(email_config, df, test=True)




Blast is the main process that calls all of the emails
It is then passed to SendMail.get_next_50(df)

Question becomes how does it default to KC Schools?
Need to change it to where it can accept any file. Also have the possibility to bypass and call directly


The for loop starting at line 181 is going to need some work when the columns start changing. Might need to go into a different kind of DB rather than column based. 
Data could be prone to change

Filter date is not necessary until db integrations


Insert an email column for uploaded files
def test_func(test, df):


Currently reading email_test.csv from GCS 


Now need to read in a file based on a box checked in the interfact. 


Get rid of optional columns, but somehow integrate tags to be able
to expand the columns out. Might be better hosted in a no sql database. 
Double back on premade templates elsewhere

Get rid of Filter date, Sport, Optional Iterated Columns, Premade templates

Upload a file with all of your emails. 
Take the test piece out on the send and confirm it works. 
Contact column should be a drop down piece that has all of the columns from the
file that is displayed in the live action


email_config is None 


All the buttons around Display Uploaded Files should be a pop out

If the file passed in is not a csv, decode  & parse it a different way
Refer to TN GCS

Somehow integrate f strings into the text box that takes the columns. 

{'EMAIL_ADDRESS_FROM': '2015samtaylor@gmail.com', 
'EMAIL_PASS': 'feqdwowrmaqthjkx', 
'server': 'emailcampaign.c9vhoi6ncot7.us-east-1.rds.amazonaws.com', 
'database': 'emailcampaign', 
'table_name': 'email_history', 
'email_subject_line': 'Local Supplier for Baseball Apparel',
 'email_campaign_name': 'Local Supplier Baseball',
  'contact_column': 'email_test',
   'db_pass': 'Pretty11', 
   'db_user': 'admin', 
   'email_content':

Take out test argument, see if it is sending rigth

With the column of 'email' changing to 'email_test' need to get that from the context and cascade it down

Get next 50 needs some work. 
Needs to be changed, and logged out better to where the messages appear on console
As the name of the contact column changes from 'email_test' to 'email' etc.. 
This will change the output.csv

Alysia is the last email in both of my frames, therefore it picks up from that 
point, and there is nothing left on my frames

With DB migrated to mySQL, test out emails sent to table using a model
Remove get_next_50 temporarily

Sent emails need to go to the db

test=False or true is scattered about 


#Need to record the emails sent in blast function to a table. Created the model. 
#Then reference the emails being passed in one by one. 
#Just need username and subject to be able to match up

# Need to improve logging on email sends. 

#IN RecordingEmailRecipients table the email_recipient is wrong or it is just not working right on the 
#send which affects it. 
RecordingEmailRecipients() got unexpected keyword arguments: 'position'


For the test func it was not able to chagne the col due to col naming change.
Log this out  



Test is in blast function. (Make a check box on home page)
process is within blast. Therefore blast should trickle down to process



Only send records to RecordingEmailRecipients if the send is succesful going through
